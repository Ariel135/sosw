AWSTemplateFormatVersion: "2010-09-09"
Description: "sosw_orchestrator"

Parameters:
  ExecutionPolicy:
    Description: "Managed execution policy for sosw lambdas."
    Type: String
    Default: 'AWSLambdaBasicExecutionRole'

  ConfigTableName:
    Description: "Config Table."
    Type: String
    Default: 'config'

  PackagesSourceS3:
    Description: "S3 bucket used for storing Lambda packages."
    Type: String
    Default: 'autotest-bucket'

Resources:

  LambdaSoswOrchestratorRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::aws:policy/service-role/${ExecutionPolicy}"

      Policies:
      - PolicyName: "SoswOrchestratorPermissions"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action: "dynamodb:Query"
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ConfigTableName}"

          - Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
              - Fn::Join:
                - ':'
                - - "arn:aws:dynamodb"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - Fn::Join:
                    - '/'
                    - - "table"
                      - Fn::ImportValue: "ddb-sosw-tasks"
                      - "*"
              - Fn::Join:
                - ':'
                - - "arn:aws:dynamodb"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - Fn::Join:
                    - '/'
                    - - "table"
                      - Fn::ImportValue: "ddb-sosw-tasks"

# Closed tasks table and indexes
          - Effect: "Allow"
            Action:
            - "dynamodb:BatchGetItem"
            - "dynamodb:Describe*"
            - "dynamodb:Get*"
            - "dynamodb:Query"
            Resource:
              - Fn::Join:
                - ':'
                - - "arn:aws:dynamodb"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - Fn::Join:
                    - '/'
                    - - "table"
                      - Fn::ImportValue: "ddb-sosw-tasks-closed"
                      - "index"
                      - "*"
              - Fn::Join:
                - ':'
                - - "arn:aws:dynamodb"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - Fn::Join:
                    - '/'
                    - - "table"
                      - Fn::ImportValue: "ddb-sosw-tasks-closed"

          - Effect: "Allow"
            Action: "lambda:InvokeFunction"
            Resource:
              - Fn::Join:
                  - ':'
                  - - "arn:aws:lambda"
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'function'
                    - 'some_function'


          - Effect: "Allow"
            Action: "lambda:InvokeFunction"
            Resource:
              - Fn::Join:
                  - ':'
                  - - "arn:aws:lambda"
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'function'
                    - 'sosw_sandbox'

              - Fn::Join:
                  - ':'
                  - - "arn:aws:lambda"
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'function'
                    - 'abs_*'

              - Fn::Join:
                  - ':'
                  - - "arn:aws:lambda"
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'function'
                    - 'adw_*'

              - Fn::Join:
                  - ':'
                  - - "arn:aws:lambda"
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'function'
                    - 'bing_*'

              - Fn::Join:
                  - ':'
                  - - "arn:aws:lambda"
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'function'
                    - 'sc_*'

              - Fn::Join:
                  - ':'
                  - - "arn:aws:lambda"
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'function'
                    - 'sys_*'

          - Effect: "Allow"
            Action: "s3:*"
            Resource: !Sub "arn:aws:s3:::${PackagesSourceS3}/sosw/*"

      RoleName: "lambda_sosw_orchestrator"

  LambdaSoswOrchestrator:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref PackagesSourceS3
        S3Key: "lambdas/sosw_orchestrator.zip"
      Description: "ABS. CloudFormation managed sosw Orchestrator."
      FunctionName: "sosw_orchestrator"
      Handler: "app.lambda_handler"
      MemorySize: 256
      Role: !GetAtt LambdaSoswOrchestratorRole.Arn
      Runtime: "python3.6"
      Timeout: 300

      Tags:
       -
         Key: 'Environment'
         Value: 'dev'
       -
         Key: 'Pattern'
         Value: 'empty'


################################################
## Permissions for CloudWatch ScheduledEvents ##
## The actual Rules are configured in Julie   ##
################################################
  PermissionForEventsToInvokeLambdaSoswOrchestrator:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Ref: "LambdaSoswOrchestrator"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
